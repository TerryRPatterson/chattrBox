#! /usr/bin/env node
module.exports = () =>{
    const http = require("http");
    const userFacingDirectory = "static";
    const fs = require("fs");
    const landingPage = "static/index.html";
    const {promisify} = require("util");
    const readdir = promisify(fs.readdir);
    const stat = promisify(fs.stat);



    let populateAuthedFiles = (authedFiles = [],
        startingPath=`${userFacingDirectory}/`) => {
        return new Promise((resolve) => {

            readdir(startingPath).then((readFiles) => {
                readFiles.forEach((entry) =>{
                    stat(startingPath + entry).then((stats) => {
                        if (stats.isFile()){
                            authedFiles.push(startingPath + entry);
                        }

                        else {
                            populateAuthedFiles(authedFiles, startingPath + entry + "/")
                                .then((moreAuthedFiles) =>{
                                    authedFiles = authedFiles.concat(moreAuthedFiles);
                                });
                        }
                    });
                });
                resolve(authedFiles);
            });
        });
    };

    let server = http.createServer((request, response) => {

        if (request.url === "/" || request.url === "/?"){
            fs.readFile(landingPage, "utf8", (err, data) => {
                response.end(data);
            });
        }

        else if (server.authedFiles.includes(
            `${userFacingDirectory}${request.url}`)){
            let dotoffset = request.url.lastIndexOf(".");
            let mimetype = dotoffset == -1
                ? 'text/plain'
                : {
                    ".html" : "text/html",
                    ".ico" : "image/x-icon",
                    ".jpg" : "image/jpeg",
                    ".png" : "image/png",
                    ".gif" : "image/gif",
                    ".css" : "text/css",
                    ".js" : "text/javascript"
                }[ request.url.substr(dotoffset) ];
            response.setHeader("Content-type" , mimetype);
            fs.readFile(`${userFacingDirectory}${request.url}`,"utf8",(err,data) => {
                response.end(data);
            });
        }

        else {
            response.statusCode = 404;
            response.end(`Woops ${request.url} doesn't exits.`);
        }
    });



    populateAuthedFiles().then((authedFiles) => {
        server.authedFiles = authedFiles;
        server.listen(3000);
    }).catch((error) => {
        throw error;
    });
}
