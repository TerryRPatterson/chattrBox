#! /usr/bin/env node
module.exports = () => {
    let WS = require("ws");
    let ws = new WS.Server({port: 3001});
    let clientMap = new Map();
    let id = require("uuid/v4");
    let slashRegex = /^\/([a-z]+?) (.*)/;
    let loginRegex = /^(.+?) (.+?)$/;
    let moment = require("moment");
    let log = require("./logging.js");
    let getTime = () =>{
        return moment().format("YYYY:MMM:DD:hh:mm:ss");
    };
    let messageLog = [];
    let userDataBase = {"Terry":{
        nameSet:true,
        name:"Terry",
        password:"Donna",
        picture:
        "https://i.pinimg.com/736x/ae/12/19/"+
        "ae1219d0438529902bf38e73873ef5ee--the-elder-scrolls-sheogorath.jpg"
    }
    };

    ws.on("connection", (client, request) => {
        clientMap.set(client,{nameSet:false, name:"Not yet logged in"});
        serverMessage("Welcome to the server.",client);
        serverMessage("Please login by using /login {user name} {password}",client);
        client.on("message", text => {
            let message = {"name":clientMap.get(client)["name"],
                "timestamp":getTime(),
                "text":text,
                type:"message"};
            let command = text.match(slashRegex);
            if (command){
                message["type"] = "command";
                if (command[1].toLowerCase() === "login"){
                    let login = command[2].match(loginRegex);
                    if (login){
                        if (userDataBase[login[1]]){
                            if (userDataBase[login[1]]["password"] === login[2]){
                                clientMap.set(client,userDataBase[login[1]]);
                                setting(clientMap.get(client)["name"],"name",
                                    client);
                                setting(clientMap.get(client)["picture"],"picture",
                                    client);
                                serverMessage("Login Successful",client);
                                serverMessage(
                                    `${clientMap.get(client)["name"]} has Joined!`);
                            } else {
                                serverMessage("Incorrect password!\n"+
                                    "Please try again", client);
                            }
                        }else{
                            serverMessage(`${login[1]} does not exit please use `+
                            "/new to create that account",client);
                        }
                    }else {
                        serverMessage("Syntax error /login {username} {password}",
                            client)
                    }
                }
                else if (command[1].toLowerCase() === "new"){
                    let login = command[2].match(loginRegex);
                    if (login){
                        if (!userDataBase[login[1]]){
                            let newUser = {name:login[1],
                                pasword:login[2],
                                nameSet:true};
                            userDataBase[login[1]] = newUser;
                            setting(newUser["name"],"name",client);
                            clientMap.set(client, newUser);
                            serverMessage(`${newUser["name"]} has been created`,
                                client);
                            serverMessage(
                                `${clientMap.get(client)["name"]} has Joined!`);
                        }
                        else {
                            serverMessage(`User ${login[1]} already exists please use`+
                            "/login {username} {password} to log in",client);
                        }
                    }else{
                        serverMessage("Invaild syntax /new {username} {password}",
                            client);
                    }

                }else if (clientMap.get(client)["nameSet"]){
                    broadcast(message,client);
                }
            }
        });
    });

    let broadcast = (message, exlusion) => {
        log(message);
        if (!exlusion){
            messageLog.push(message);
        }
        ws.clients.forEach( client => {
            let clientInfo = clientMap.get(client);
            if (client !== exlusion && clientInfo.nameSet){
                client.send(JSON.stringify(message));
            }
        });
    };
    let serverMessage = (message, target) => {
        let serverMessage = {name:"server",timestamp:getTime(),text:message};
        if (target){
            target.send(JSON.stringify(serverMessage));
        }
        if (!target){
            messageLog.push(message);
            ws.clients.forEach( client => {
                if (clientMap.get(client).nameSet){
                    client.send(JSON.stringify(serverMessage));
                }
            });
        }
    };
    let setting = (value, key, target) => {
        target.send(JSON.stringify({type:"setting",
            key:key, value:value}));
    };
}
